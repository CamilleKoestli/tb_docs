== Frontend <implementation-frontend>

L’implémentation frontend de la plateforme a été pensée pour offrir aux joueur·euse·s une expérience immersive et cohérente, tout en restant fidèle au scénario du serious game. Chaque challenge a donc sa propre interface dédiée, permettant de simuler des environnements réalistes ou des outils techniques. L’objectif était de reproduire, directement dans le navigateur, les étapes que l’on retrouverait dans une véritable enquête de cybersécurité, sans nécessiter l’installation d’outils externes.

=== Challenge 1
Pour le challenge 1, une interface d’email a été développée, comme le montre la @chall1. #figure(image("imgs/chall1.png" , width: 70%), caption: [Visuel du mail avec en dessous le terminal, challenge 1])<chall1> Elle permet d’afficher un message suspect et d’accéder à ses détails techniques grâce à un bouton `Détails`. #figure(image("imgs/chall1'.png", width: 75%), caption: [Visuel des détails du mail, challenge 1])<chall1.1> L’idée est que le joueur·euse puisse à la fois consulter le mail tel qu’un employé l’aurait reçu et analyser ses en-têtes pour remonter au domaine frauduleux. Afin de renforcer le réalisme, un faux domaine `horizonsante-support.com` a été créé, ce qui va permettre de lancer la commande `whois` afin de pouvoir l'analyser sur le terminal, visible dans la @chall1. Ainsi, le joueur·euse découvre concrètement comment un simple mail peut servir de point d’entrée à une cyberattaque.

=== Challenge 2 
Le challenge 2 propose une page de connexion. Cette interface illustre une attaque par injection SQL sur un portail frauduleux, protégé par un WAF (pare-feu applicatif) volontairement basique. #figure(image("imgs/chall2''.png", width: 70%), caption: [Page de connexion au portail frauduleux avec un message d'alerte du WAF, challenge 2])<chall2> Après avoir saisi la requête SQL dans le champ de mot de passe, le joueur·euse peut contourner l’authentification et accéder à une page de session simulant la réussite de la connexion #figure(image("imgs/chall2'.png", width: 70%), caption: [Session connexion réussite, challenge 2])<chall2.>. 

=== Challenge 3
Dans le challenge 3, l’objectif est de mettre en avant la navigation dans des dossiers, afin de sensibiliser aux problèmes de contrôle d’accès. Le joueur·euse commence le défi en arrivant sur le dashboard du site des attaquants. #figure(image("imgs/chall3.png", width: 80%), caption: [Dashboard une fois connecté sur la plateforme des attaquants, challenge 3])<chall3> Sur cette page, il pourra ensuite cliquer sur le lien `Gestion des fichers` qui simule un gestionnaire de fichiers, avec un premier accès restreint au répertoire `/shared`. #figure(image("imgs/chall3'.png", width: 80%), caption: [Dossiers shared, challenge 3])<chall3.1> Le joueur·euse doit manipuler directement l’URL, dans un premier temps, en modifiant le paramètre `?dir=` pour retrouver le dossier racine, qui est la figure @chall3.2, puis explorer l’arborescence complète.  Chaque dossier correspond à une page HTML distincte, ce qui permet de rendre la navigation concrète et progressive. On peut ainsi passer du tableau de bord au répertoire partagé, puis remonter à la racine et enfin atteindre des sous-dossiers sensibles comme `/archives/2025`, qui se trouve dans la @chall3.3 .  #figure(image("imgs/chall3''.png", width: 80%), caption: [Dossiers racine, challenge 3])<chall3.2>
#figure(image("imgs/chall3'''.png", width: 80%), caption: [Exploration des dossiers jusqu'au dossier `/archives/2025`, challenge 3])<chall3.3>

=== Challenge 4
Le challenge 4 introduit un environnement Python directement intégré dans le navigateur grâce à Pyodide. Cette technologie permet d’exécuter du code Python sans rien installer, en offrant un terminal interactif. L’interface met en parallèle le fichier suspect et le terminal, de sorte que le joueur·euse puisse expérimenter des commandes comme `zipinfo`. #figure(image("imgs/chall4''.png"), caption: [IDE python pour analyser le fichier et terminal afin de pouvoir réaliser un `zipinfo`, challenge 4])<chall4>

=== Challenge 5
Le challenge 5 garde l’IDE Python embarqué, mais cette fois pour pousser le joueur·euse à écrire un peu de code et analyser un script. Il s’agit de décoder des informations cachées dans un fichier et de reconstituer une URL que les attaquants sont susceptibles d’utiliser. Le terminal et l’IDE sont au cœur de l’interface, de manière à donner l’impression de travailler dans un véritable environnement d’analyse, tout en restant guidé par les consignes du scénario.
#figure(image("imgs/chall5.png"), caption: [IDE python pour analyser le fichier et réaliser du code pour identifer la page, challenge 5])<chall5>

=== Challenge 6

Le challenge 6 propose une interface avec un chatbot interactif. Il permet au joueur·euse de tester différentes commandes, comme `help`, mais contient aussi des vulnérabilités de sécurité qu'il va devoir exploiter. L’idée était de rendre l’expérience plus ludique et interactive, tout en introduisant des notions liées aux failles XSS et à la compromission de sessions. Le chatbot devient donc à la fois un outil d’aide et une cible d’attaque. #figure(image("imgs/chall6.png", width: 80%), caption: [Interface du chatbot, challenge 6])<chall6>


=== Challenge 7

Enfin, le challenge 7 recrée l’interface interne de la plateforme hospitalière. #figure(image("imgs/chall7.png", width: 80%), caption: [Interface de la plateforme de l'hôpital, challenge 7])<chall7> Le joueur·euse y trouve un menu latéral regroupant différents outils, comme l’accès aux journaux VPN. Les logs peuvent être ouverts et analysés directement depuis l’interface, ce qui permet de repérer l’adresse IP la plus suspecte. #figure(image("imgs/chall7'.png"), caption: [Visuel des logs, challenge 7])<chall7.1>
Une fois cette IP identifiée, un formulaire intégré permet de la bloquer dans le pare-feu. La validation est confirmée par un message spécifique, simulant le succès de l’action. #figure(image("imgs/chall7''.png", width: 70%), caption: [Formulaire pour bloquer une IP et obtenir le code de validation, challenge 7])<chall7.2>