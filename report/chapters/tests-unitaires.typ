== Tests unitaires <tests-unitaires>

L'utilisation de Jest a permis de réaliser des tests unitaires sur les différentes fonctions critiques du scénario Horizon. Cela inclut la validation des mécanismes d'authentification, la gestion des sessions, et la vérification des permissions d'accès aux différentes sections du site. Les tests unitaires permettent de s'assurer que chaque composant fonctionne correctement de manière isolée avant de les intégrer dans le système global.

=== Configuration de l'environnement de test
Jest est configuré pour exécuter les tests dans un environnement Node.js. La configuration permet de mesurer la couverture du code testé et génère des rapports pour vérifier la qualité des tests.

=== Détails des tests par challenge
Les tests du challenge 1 valident la fonction `toggleDetails()` qui permet de basculer entre la vue normale et la vue détaillée d'un email. Un environnement DOM virtuel a été créé avec JSDOM pour simuler le navigateur. Ces tests permettent de vérifier l'état du DOM, valider l'état initial, tester le basculement de l'état mais aussi les basculements successifs. Ces tests permettent de garantir que l'interface utilisateur répond correctement aux interactions et que les états d'affichage sont gérés de manière cohérente.

Concernant le challenge 2, des tests unitaires ont été conçus pour valider le fonctionnement du filtre WAF (Web Application Firewall) implémenté. Le filtre a pour objectif de bloquer les tentatives d’injection SQL en identifiant des patterns suspects comme `SELECT`, `UNION`, `OR` et les commentaires `--`. Les tests couvrent des inputs normaux des cas où des chaînes malicieuses doivent être bloquées, l'insensibilité à la casse, et d'autres variations. De plus, des tests de connexion à la base de données sont également inclus pour s'assurer que les requêtes légitimes passent correctement. Ces tests permettent de confirmer que la connexion MySQL fonctionne à l'aide de différents scénarios, comme une connexion réussie, identifiants incorrects, ... Ils simulent également un processus d’authentification afin de vérifier que les interactions avec la base respectent la logique prévue. Ces tests permettent de s'assurer que le WAF fonctionne comme attendu tout en laissant la possibilité aux joueurs de résoudre le challenge.

Pour le challenge 3, les tests valident la fonction `resolveDirToFile()` qui mappe les chemins de répertoires vers les fichiers HTML correspondants. Ils ont pour but de valider le chemin racine vers le fichier par défaut, de tester des répertoires principaux et secondaires (archives par année), de vérifier les fallback en cas de répertoires inexistants, et de s'assurer de la cohérence du traitement du slash. Ces tests assurent que le système de navigation fonctionne correctement et que les utilisateurs peuvent accéder aux bonnes ressources.

Le challenge 4 intègre des tests concernant la validation du flag et l’affichage correct des fichiers décompressés après avoir fourni la réponse valide. Les tests vérifient l’absence de flag, la validité d’un flag, correcte ou non, pour renvoyer les bons messages. Ce type de test est fondamental pour garantir que le flux de validation reste cohérent et que l’utilisateur reçoit un retour clair et précis.

Dans le challenge 5, les tests contrôlent les mécanismes de décodage en base64. La fonction testée doit vérifier et rejeter les séquences invalides, mais aussi reconstruire correctement une chaîne de plusieurs fragments encodés. Les tests vérifient que le décodage produit les chemins attendus et que la validation du flag fonctionne uniquement si l’utilisateur fournit le chemin correct. Cela assure que le processus de reverse engineering intégré au challenge est le plus fidèle à la réalité.

Pour le challenge 6, deux séries de tests unitaires ont été développées. La première concerne l'authentification du cookie administrateur, qui doit correspondre à une valeur bien précise. Les tests simulent l’absence du cookie, la présence d’un cookie invalide et le cookie correct, afin de s’assurer que le comportement voulu est obtenu. La deuxième série vérifie la suppression de fichiers, où l’action ne peut être faite que si le cookie est valide et que le flag est correctement transmis. Ces tests garantissent que l’escalade de privilèges via XSS est bien représentée et que la mécanique backend réagit correctement.

Enfin, les tests du challenge 7 vérifient le mécanisme de génération de code de blocage d’adresses IP. Les tests s'assurent que le format des adresses est correct et que le code de confirmation produit est bien ce qui est attendu. La validation du flag est également testée pour s’assurer qu’un code généré correspond bien à l’IP suspecte identifiée. Cela permet de s’assurer que le challenge reste cohérent et que les joueurs peuvent interagir avec le système de manière réaliste.

//TODO A REVOIR
Pour terminer, des tests de la base de données MongoDB valident l'initialisation sécurisée des flags de challenges. Ils vérifient que la création des flags est correcte à partir des variables d'environnement pour les différentes années, la validation du hachage des valeurs des flags, la connexion à la base de données, la gestion des entrées et en cas de duplications de flags.
